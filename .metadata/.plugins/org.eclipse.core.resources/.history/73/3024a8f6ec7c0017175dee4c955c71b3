/**
 * 
 */
package org.fmaes.simppaal.simulinktotimedautomata.core.transformers;

import java.util.HashMap;

import org.fmaes.j2uppaal.builders.UppaalDocumentBuilder;
import org.fmaes.j2uppaal.datastructures.uppaalstrcutures.interfaces.UppaalAutomatonInterface;
import org.fmaes.j2uppaal.datastructures.uppaalstrcutures.interfaces.UppaalDocumentInterface;
import org.fmaes.j2uppaal.datastructures.uppaalstructures.UppaalAutomaton;
import org.fmaes.j2uppaal.datastructures.uppaalstructures.UppaalDocument;
import org.fmaes.simppaal.simulinktotimedautomata.core.configuration.ApplicationConfiguration;
import org.fmaes.simppaal.simulinktotimedautomata.core.types.SimulinkBlockWrapper;
import org.fmaes.simppaal.simulinktotimedautomata.core.types.SimulinkModelWrapper;
import org.fmaes.simppaal.simulinktotimedautomata.platformextender.BlockRoutineGeneratorInterface;
import org.fmaes.simppaal.simulinktotimedautomata.platformextender.BlockRoutineGeneratorPluginManager;
import org.fmaes.simppaal.simulinktotimedautomata.sorder.SortedOrderList;

/**
 * @author Predrag Filipovikj (predrag.filipovikj@mdh.se)
 *
 */
public class SimulinkModelTransformer {

  private ApplicationConfiguration appConfig;

  private HashMap<String, UppaalAutomatonInterface> templates;

  private HashMap<String, BlockRoutineGeneratorInterface> plugins;

  private final String defaultPluginDirectory = "./plugins/";
  private final String defaultUPPAALTemplateFile = "./templates/uppaal/templates.xml";
  private final String defaultEmptyModelFile = "./templates/uppaal/empty.xml";

  @SuppressWarnings("unused")
  private SimulinkModelTransformer() {

  }

  public SimulinkModelTransformer(ApplicationConfiguration _appConfig) {
    appConfig = _appConfig;
    loadTemplates();
    loadPlugins();
  }

  private void loadPlugins() {
    String pluginDirectory = appConfig.getProperty("pluginDirectory", defaultPluginDirectory);
    plugins = BlockRoutineGeneratorPluginManager.loadPluginsFromDirectory(pluginDirectory);
  }

  private void loadTemplates() {
    templates = new HashMap<String, UppaalAutomatonInterface>();
    String templateDocumentLocation =
        appConfig.getProperty("uppaalTemplatesFile", defaultUPPAALTemplateFile);
    UppaalDocument uppaalTemplateDocument =
        UppaalDocumentBuilder.buildUppaalDocument(templateDocumentLocation);

    for (UppaalAutomatonInterface automaton : uppaalTemplateDocument.getAllAutomata()) {
      if (automaton != null) {
        UppaalAutomaton atm = (UppaalAutomaton) automaton.clone();
        templates.put(automaton.getName(), atm);
      }
    }

  }

  private BlockRoutineGeneratorInterface findBlockGenerator(String blockType) {
    return plugins.get(blockType);
  }

  private UppaalAutomatonInterface loadAutomatonTemplate(String sTime) {
    UppaalAutomatonInterface blockAutomaton;

    if (sTime == null || sTime.equals("")) {
      blockAutomaton = templates.get("continuous");
    } else {
      blockAutomaton = templates.get("discrete");
    }

    return (UppaalAutomaton) blockAutomaton.clone();
  }

  private String generateComments(SimulinkBlockWrapper sBlock) {
    return null;
  }

  private String generateBlockRoutine(SimulinkBlockWrapper sBlock,
      BlockRoutineGeneratorInterface generator) throws NullPointerException {
    String bRoutine = generator.generateBlockRoutine(sBlock);
    return bRoutine != null ? bRoutine : "";
  }

  private String generateDefaultBlockRoutine(SimulinkBlockWrapper sBlock) {
    return String.format("void blockRoutine(){\n %s}", generateComments(sBlock));
  }

  private String generateDafnyProcedure(SimulinkBlockWrapper sBlock,
      BlockRoutineGeneratorInterface generator) throws NullPointerException {
    String dafnyProcedure = generator.generateDafnyVerificationRoutine(sBlock);
    return dafnyProcedure != null ? dafnyProcedure : "";
  }

  private String generateDefaultDafnyProcedure(SimulinkBlockWrapper sBlock) {
    return "";
  }

  private String generateAutomatonName(SimulinkBlockWrapper sBlock) {
    return String.format("%s_%d", sBlock.getName(), sBlock.getExecutionOrderNumber());
  }

  private String generateDeclrationStatement(SimulinkBlockWrapper sBlock,
      BlockRoutineGeneratorInterface generator) throws NullPointerException {
    String declaration = generator.generateDeclaration(sBlock);
    return declaration != null ? declaration : "";
  }

  private String generateDefaultDeclrationStatement(SimulinkBlockWrapper sBlock) {
    return "";
  }

  private String generateSignalDeclaration(SimulinkBlockWrapper sBlock,
      BlockRoutineGeneratorInterface generator) throws NullPointerException {
    String signalDeclaration = generator.generateSignalDeclaration(sBlock);
    return signalDeclaration != null ? signalDeclaration : "";
  }

  private String generateDefaultSignalDeclaration(SimulinkBlockWrapper sBlock) {
    return String.format("double %s_%d_signal", sBlock.getName(), sBlock.getExecutionOrderNumber());
  }

  private String getOffset(SimulinkBlockWrapper sBlock) {
    String offset = sBlock.getParameter("offset");

    return offset != null ? offset : "";
  }

  private AutomatonData populateAutomatonDataFromPlugin(SimulinkBlockWrapper sBlock,
      BlockRoutineGeneratorInterface generator) {
    String aName = generateAutomatonName(sBlock);
    String sampleTime = sBlock.getSampleTime();
    String blockRoutine = generateBlockRoutine(sBlock, generator);
    String dafnyProcedure = generateDafnyProcedure(sBlock, generator);
    String declarationStatement = generateDeclrationStatement(sBlock, generator);
    String signalDeclaration = generateSignalDeclaration(sBlock, generator);
    AutomatonData aData = new AutomatonData(aName, sampleTime, blockRoutine, dafnyProcedure,
        declarationStatement, signalDeclaration, offset, );

    return aData;
  }

  private AutomatonData populateAutomatonDataWithDefaults(SimulinkBlockWrapper sBlock) {
    String aName = generateAutomatonName(sBlock);
    String sampleTime = sBlock.getSampleTime();
    String blockRoutine = generateDefaultBlockRoutine(sBlock);
    String dafnyProcedure = generateDefaultDafnyProcedure(sBlock);
    String declarationStatement = generateDefaultDeclrationStatement(sBlock);
    String signalDeclaration = generateDefaultSignalDeclaration(sBlock);
    AutomatonData aData = new AutomatonData(aName, sampleTime, blockRoutine, dafnyProcedure,
        declarationStatement, signalDeclaration);

    return aData;
  }

  private AutomatonData generateAutomatonData(SimulinkBlockWrapper sBlock) {
    BlockRoutineGeneratorInterface generator = findBlockGenerator(sBlock.getType());
    AutomatonData aData;
    if (generator != null) {
      aData = populateAutomatonDataFromPlugin(sBlock, generator);
    } else {
      aData = populateAutomatonDataWithDefaults(sBlock);
    }
    return aData;
  }

  private UppaalAutomatonInterface instantiateAutomaton(SimulinkBlockWrapper sBlock) {
    String sampleTime = sBlock.getSampleTime();
    String executionOrderNumber = String.format("%d", sBlock.getExecutionOrderNumber());
    AutomatonData aData = generateAutomatonData(sBlock);
    UppaalAutomaton blockAutomatonInstance = (UppaalAutomaton) loadAutomatonTemplate(sampleTime);
    String automatonDeclaration = blockAutomatonInstance.getDeclaration();

    automatonDeclaration = automatonDeclaration.replaceAll("#SN#", executionOrderNumber);
    automatonDeclaration = automatonDeclaration.replaceAll("#TS#", aData.getSampleTime());
    automatonDeclaration = automatonDeclaration.replaceAll("#OFFSET#", aData.getSampleTime());

    return blockAutomatonInstance;
  }

  public UppaalAutomatonInterface generateAutomaton(SimulinkBlockWrapper sBlock) {
    return instantiateAutomaton(sBlock);
  }

  public UppaalDocumentInterface generateUppaalModel(SimulinkModelWrapper sModel,
      SortedOrderList sList) {
    String emptyModelFile = appConfig.getProperty("emptyUppaalDocument", defaultEmptyModelFile);
    UppaalDocumentInterface uppaalModel = UppaalDocumentBuilder.buildUppaalDocument(emptyModelFile);

    return uppaalModel;
  }
}
