/**
 * 
 */
package org.fmaes.simppaal.simulinktotimedautomata.core.types.wrappers;

import org.conqat.lib.simulink.model.SimulinkBlock;

/**
 * @author Predrag Filipovikj (predrag.filipovikj@mdh.se)
 *
 */
public class SimulinkBlockWrapper {

  private SimulinkBlock simulinkBlock;

  private final String[] compositeBlockTypes =
      {"subsystem", "reference", "modelreference", "model"};

  private final String[] nonComputationalBlockTypes =
      {"mux", "demux", "goto", "from", "inport", "outport", "function-call generator"};

  /**
   * @param simulinkBlock
   */
  public SimulinkBlockWrapper(SimulinkBlock _simulinkBlock) {
    simulinkBlock = _simulinkBlock;
  }

  public String getType() {
    return simulinkBlock.getType();
  }

  public String getParameter(String parameterName) {
    return simulinkBlock.getParameter(parameterName);
  }

  public void setParameter(String parameterName, String parameterValue) {
    simulinkBlock.setParameter(parameterName, parameterValue);
  }

  public String getId() {
    return simulinkBlock.getId();
  }

  public boolean exists() {
    return simulinkBlock != null;
  }

  public boolean isAtomic() {
    boolean isAtomic = true;

    for (String compositeBlockType : compositeBlockTypes) {
      if (this.getType().toLowerCase().equals(compositeBlockType)) {
        isAtomic = false;
        break;
      }
    }

    return isAtomic;
  }

  public boolean isComputational() {
    boolean isComputational = true;

    for (String nonComputationalBlockType : nonComputationalBlockTypes) {
      if (this.getType().toLowerCase().equals(nonComputationalBlockType)) {
        isComputational = false;
        break;
      }
    }

    return isComputational;
  }

}
