/**
 * 
 */
package org.fmaes.simppaal.simulinktotimedautomata.core.types.wrappers;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Dictionary;

import org.conqat.lib.simulink.model.SimulinkModel;
import org.fmaes.simppaal.simulinktotimedautomata.core.configuration.ApplicationConfiguration;
import org.fmaes.simppaal.simulinktotimedautomata.core.loaders.SimulinkModelLoader;
import org.fmaes.simppaal.simulinktotimedautomata.core.types.hierarchy.HierarchyNode;
import org.fmaes.simppaal.simulinktotimedautomata.core.types.hierarchy.HierarchyTree;;

/**
 * @author Predrag Filipovikj (predrag.filipovikj@mdh.se)
 *
 */
public class SimulinkSystemModel {

  private Dictionary<String, SimulinkModelWrapper> simulinkModelFiles;
  private HierarchyTree modelHierarcyTree;
  private SimulinkModelLoader simulinkModelLoader;

  public SimulinkSystemModel(ApplicationConfiguration _appConfig, String rootModelName) {
    simulinkModelLoader = new SimulinkModelLoader(_appConfig);
    loadHierarchy(rootModelName);
  }

  private void loadHierarchy(String rootModelName) {
    SimulinkModelWrapper wrappedRootModel = loadSimulinkModel(rootModelName);

    addEntryToModelsList(wrappedRootModel);
    HierarchyNode hNode = new HierarchyNode(rootModelName);
    addEntryToHierarchy(hNode);
  }

  private void loadReferencedModels(HierarchyNode parentNode,
      SimulinkModelWrapper wrappedSimulinkModel) {
    Collection<SimulinkBlockWrapper> externalReferenceBlocks =
        wrappedSimulinkModel.getExternalReferencedModelBlocks();
    for (SimulinkBlockWrapper externalReferenceBlock : externalReferenceBlocks) {
      loadReferencedModel(parentNode, externalReferenceBlock);
    }

  }

  private void loadReferencedModel(HierarchyNode parentNode,
      SimulinkBlockWrapper referencedSimulinkBlock) {

  }

  private void addEntryToHierarchy(HierarchyNode _node) {
    modelHierarcyTree.add(_node);
  }

  private void addEntryToModelsList(SimulinkModelWrapper _wrappedSimulinkModel) {
    String modelName = _wrappedSimulinkModel.getModelName();
    if (simulinkModelFiles.get(modelName) == null) {
      simulinkModelFiles.put(modelName, _wrappedSimulinkModel);
    }
  }

  private SimulinkModelWrapper loadSimulinkModel(String modelName) {
    // First check in the preloaded files
    SimulinkModelWrapper wrappedModel = simulinkModelFiles.get(modelName);
    // if it does not exist in the pre-loaded files, open it from the disk
    if (wrappedModel == null) {
      // The printline is for debugging purposes
      System.out.println("Disk access for loading model " + modelName);
      wrappedModel = simulinkModelLoader.loadAndWrapSimulinkModelByName(modelName);
    }
    return wrappedModel;
  }

}
