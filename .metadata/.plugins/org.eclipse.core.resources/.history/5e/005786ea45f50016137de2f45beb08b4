package org.fmaes.simulinktotimedautomata.platformextender.blockroutinegenerator.logic;

import org.fmaes.simulinktotimedautomata.blockroutinegenerator.BlockRoutineGeneratorInterface;
import org.fmaes.simulinktotimedautomata.types.wrappers.Predecessor;
import org.fmaes.simulinktotimedautomata.types.wrappers.SimulinkBlockWrapper;

public class LogicOperator implements BlockRoutineGeneratorInterface {

  @Override
  public String generateBlockRoutine(SimulinkBlockWrapper blockForParsing) {
    String operatorType = blockForParsing.getDeclaredParameter("Operator");
    if (operatorType == null || operatorType.trim().equals("")) {
      operatorType = "and";
    }
    // TODO Auto-generated method stub
    String expression = "";
    int counter = 0;
    if (operatorType.toLowerCase().equals("and")) {
      for (Predecessor predecessor : blockForParsing.predecessors) {
        if (!predecessor.getSimulinkBlock().exists()) {
          continue;
        }
        if (counter == 0) {
          expression += String.format("%s == 1.0", predecessor.getSimulinkBlock().getSignalName());
        } else {
          expression += String.format(" &amp;&amp; %s == 1.0",
              predecessor.getSimulinkBlock().getSignalName());
        }
        counter++;
      }
    }
    if (operatorType.toLowerCase().equals("or")) {
      for (Predecessor predecessor : blockForParsing.predecessors) {
        if (!predecessor.getSimulinkBlock().exists()) {
          continue;
        }
        if (counter == 0) {
          expression += String.format("%s == 1.0", predecessor.getSimulinkBlock().getSignalName());
        } else {
          expression +=
              String.format(" || %s == 1.0", predecessor.getSimulinkBlock().getSignalName());
        }
        counter++;
      }
    }
    if (operatorType.toLowerCase().equals("not")) {
    }

    return String.format("void blockRoutine(){%s}", expression);
  }

}
