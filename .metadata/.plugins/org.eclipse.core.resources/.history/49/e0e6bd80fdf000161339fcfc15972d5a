package org.fmaes.simulinktotimedautomata.main;

import org.conqat.lib.simulink.model.SimulinkLine;
import org.conqat.lib.simulink.model.SimulinkModel;
import org.conqat.lib.simulink.model.SimulinkPortBase;
import org.fmaes.j2uppaal.datastructures.uppaalstructures.UppaalDocument;
import org.fmaes.simulinktotimedautomata.blockroutinegenerator.BlockRoutineGeneratorInterface;
import org.fmaes.simulinktotimedautomata.builders.SimulinkModelBuilder;
import org.fmaes.simulinktotimedautomata.platformextender.BlockRoutineGeneratorPluginManager;
import org.fmaes.simulinktotimedautomata.transformers.SimulinkModelTransformer;
import org.fmaes.simulinktotimedautomata.types.wrappers.Predecessor;
import org.fmaes.simulinktotimedautomata.types.wrappers.SimulinkBlockWrapper;
import org.fmaes.simulinktotimedautomata.types.wrappers.SimulinkModelWrapper;
import org.fmaes.simulinktotimedautomata.util.Util;

public class Main {

  public static void main(String[] args) {


    String switchId = "brake_acc_nodiv/Vehicle_Body_Wheels/RR";
    String gainId = "brake_acc_nodiv/Brake_Torq_Calculation/Gain1";
    String sumId = "brake_acc_nodiv/Vehicle_Body_Wheels/RL_Wheel/Sum";
    
    

    String testing = "brake_acc_nodiv/Veh_Speed_Estimator#brake_acc_nodiv/Veh_Speed_Estimator/Add#";
    System.out.println(Util.extractGlobalIdFromRegistryEntry(testing));
    System.out.println(Util.extractLocalIdFromRegistryEntry(testing));

    String weirdId = "brake_acc_nodiv/ABS_RR_Wheel/If v>=10 km//h/wheSpd (m//s)";
    String simulinkModelName = "LDC_RoadSpeedLimitManager_v2";
    String slistFileName = "slist";

    SimulinkModelWrapper rootModel =
        SimulinkModelBuilder.loadWrappedSimulinkModelByName(simulinkModelName);

    
    if (rootModel.exists()) {
      
      SimulinkBlockWrapper bbc = rootModel.getBlockById("brake_acc_nodiv/Vehicle_Body_Wheels");
      System.out.println("--------------++++++++++--------------");
      for (SimulinkLine line : rootModel.getSimulinkModel().getContainedLines()) {
        System.out.println(line);        
      }
      System.out.println("--------------++++++++++--------------");
      for (SimulinkLine line : bbc.getSimulinkBlock().getContainedLines()) {
        System.out.println(line);        
      }
      
      
      SimulinkBlockWrapper sum = rootModel.getBlockById(sumId);
      System.out.println(sum.getParameter("Inputs"));
      
      
      
      SimulinkBlockWrapper gain = rootModel.getBlockById(gainId);
      System.out.println(gain.getParameter("Gain"));
      System.out.println(gain.getParameter("OutMin"));
      System.out.println(gain.getParameter("OutMax"));
      System.out.println(gain.getParameter("Multiplication"));
      System.out.println(gain.getParameter("control"));
      
    }

    UppaalDocument resultModel = SimulinkModelTransformer
        .transformSimulinkModeltoTimedAutomata(simulinkModelName, slistFileName);
    resultModel.saveToFile("resultmodel_newest.xml");

    // TODO Auto-generated method stub

    /*
     * 
     * String rootSimulinkModelPath = "./models/simulink/BBW/brake_acc_nodiv.mdl"; String
     * referencedSSId = "brake_acc_nodiv/Veh_Speed_Estimator"; String routinesDirectory =
     * "./templates/block-routines"; String fileName = String.format("%s.txt", "add"); Path
     * routineFilePath = Paths.get(routinesDirectory, fileName); SimulinkModelWrapper rootModel =
     * SimulinkModelBuilder.buildSimulinkModel(rootSimulinkModelPath); ReferencedBlockInfo rbi =
     * rootModel.getSimulinkModel().getReferencedBlockInfo(); if(rootModel.isReferenced()){
     * System.out.println("root model recognised as referenced"); } SimulinkBlockWrapper
     * referencedSubSystem = rootModel.getBlockById(referencedSSId); SimulinkModelWrapper
     * referencedModel = SimulinkModelBuilder.buildReferencedSimulinkModel(referencedSubSystem);
     * if(referencedModel.exists() && referencedModel.isReferenced()){
     * System.out.println("Referenced model loaded successfully"); } String
     * addBlockInReferencedModelId = "brake_acc_nodiv/Veh_Speed_Estimator/Add"; SimulinkBlockWrapper
     * blockInReferencedModel = rootModel.getBlockById(addBlockInReferencedModelId);
     * if(blockInReferencedModel.exists()){
     * System.out.println(blockInReferencedModel.getIdInLocalContext());
     * System.out.println(blockInReferencedModel.getIdInGlobalContext());
     * System.out.println(blockInReferencedModel.getSampleTime()); }
     * 
     * 
     * 
     * String rootSimulinkModelPath = "./models/simulink/BBW/brake_acc_nodiv.mdl"; String
     * atomicSimulinkBlockId = "brake_acc_nodiv/RT13"; String testingId = "brake_acc_nodiv/RT9";
     * String referencedModelBlockId = "brake_acc_nodiv/Veh_Speed_Estimator"; String pedalMapId =
     * "brake_acc_nodiv/LDM_BrakePedal/elSignal"; String hwRRBrakeId = "brake_acc_nodiv/HW_RRBrake";
     * 
     * SimulinkModelWrapper wrappedRootModel =
     * SimulinkModelBuilder.buildSimulinkModel(rootSimulinkModelPath); SimulinkBlockWrapper
     * atomicSimulinkBlock = wrappedRootModel.getBlockById(atomicSimulinkBlockId);
     * SimulinkBlockWrapper pedalMap = wrappedRootModel.getBlockById(pedalMapId);
     * 
     * SimulinkBlockWrapper hwRRBrake = wrappedRootModel.getBlockById(hwRRBrakeId);
     * SimulinkBlockWrapper testing = wrappedRootModel.getBlockById(testingId);
     * Collection<SimulinkBlockWrapper> testinPredecessors = testing.getPredecessors();
     * Collection<SimulinkLineWrapper> linezzz = hwRRBrake.getOutgoingLines();
     * Collection<SimulinkBlockWrapper> prdcessors = pedalMap.getPredecessors();
     * System.out.println("predecessors start"); for (SimulinkBlockWrapper simulinkBlockWrapper :
     * testinPredecessors) { System.out.println(simulinkBlockWrapper.getId()); }
     * System.out.println("predecessors end"); SimulinkBlockWrapper referenceModelBlockWrap =
     * wrappedRootModel.getBlockById(referencedModelBlockId); SimulinkModelWrapper
     * wrappedReferencedModel = SimulinkModelBuilder.buildReferencedSimulinkModel(
     * referenceModelBlockWrap, "./models/simulink/BBW/lib_spd_estimator_nodiv.mdl");
     * System.out.println(wrappedReferencedModel.getGlobalId());
     * System.out.println(referenceModelBlockWrap.getType()); System.out.println("libname " +
     * referenceModelBlockWrap.getLibraryName()); System.out.println("libname plus subsystem" +
     * referenceModelBlockWrap.getLibraryandSubsystem());
     * 
     * System.out.println(atomicSimulinkBlock.getId());
     * System.out.println(atomicSimulinkBlock.getName());
     * System.out.println("Just for debugging purpose");
     * 
     * String globalId = "model/ss1/ss2/ss3/ss4/blk"; String localId = "library/ss5";
     * System.out.println(Util.buildLocalId(globalId, localId));
     * 
     * String addBlockInReferencedModelId = "brake_acc_nodiv/Veh_Speed_Estimator/Add";
     * SimulinkBlockWrapper additioninref =
     * wrappedRootModel.getBlockById(addBlockInReferencedModelId); String bid =
     * additioninref.getId(); System.out.println(bid);
     */
  }

  static void printBlockProps(SimulinkBlockWrapper block) {
    for (String declaredParam : block.getDeclaredParameterNames()) {
      System.out.println("param name: " + declaredParam);
      System.out.println("param value: " + block.getDeclaredParameter(declaredParam));
    }
  }

  private static void printModelDeclaredParam(SimulinkModelWrapper modelWrapped) {
    SimulinkModel sModel = modelWrapped.getSimulinkModel();
    for (String prop : sModel.getParameterNames()) {
      System.out.println("name: " + prop);
      System.out.println("value: " + sModel.getDeclaredParameter(prop));

    }

  }

}
