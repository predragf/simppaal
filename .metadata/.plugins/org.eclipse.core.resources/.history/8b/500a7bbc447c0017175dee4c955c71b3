/**
 * 
 */
package org.fmaes.simppaal.simulinktotimedautomata.core.transformers;

import java.util.HashMap;

import org.fmaes.j2uppaal.builders.UppaalDocumentBuilder;
import org.fmaes.j2uppaal.datastructures.uppaalstrcutures.interfaces.UppaalAutomatonInterface;
import org.fmaes.j2uppaal.datastructures.uppaalstrcutures.interfaces.UppaalDocumentInterface;
import org.fmaes.j2uppaal.datastructures.uppaalstructures.UppaalAutomaton;
import org.fmaes.j2uppaal.datastructures.uppaalstructures.UppaalDocument;
import org.fmaes.simppaal.simulinktotimedautomata.core.configuration.ApplicationConfiguration;
import org.fmaes.simppaal.simulinktotimedautomata.core.types.SimulinkBlockWrapper;
import org.fmaes.simppaal.simulinktotimedautomata.platformextender.BlockRoutineGeneratorInterface;
import org.fmaes.simppaal.simulinktotimedautomata.platformextender.BlockRoutineGeneratorPluginManager;

/**
 * @author Predrag Filipovikj (predrag.filipovikj@mdh.se)
 *
 */
public class SimulinkModelTransformer {

  private ApplicationConfiguration appConfig;

  private HashMap<String, UppaalAutomatonInterface> templates;

  private HashMap<String, BlockRoutineGeneratorInterface> plugins;

  private final String defaultPluginDirectory = "./plugins/";
  private final String defaultUPPAALTemplateFile = "./templates/uppaal/templates.xml";

  @SuppressWarnings("unused")
  private SimulinkModelTransformer() {

  }

  public SimulinkModelTransformer(ApplicationConfiguration _appConfig) {
    appConfig = _appConfig;
    loadTemplates();
    loadPlugins();
  }

  private void loadPlugins() {
    String pluginDirectory = appConfig.getProperty("pluginDirectory", defaultPluginDirectory);
    plugins = BlockRoutineGeneratorPluginManager.loadPluginsFromDirectory(pluginDirectory);
  }

  private void loadTemplates() {
    templates = new HashMap<String, UppaalAutomatonInterface>();
    String templateDocumentLocation =
        appConfig.getProperty("uppaalTemplatesFile", defaultUPPAALTemplateFile);
    UppaalDocument uppaalTemplateDocument =
        UppaalDocumentBuilder.buildUppaalDocument(templateDocumentLocation);

    for (UppaalAutomatonInterface automaton : uppaalTemplateDocument.getAllAutomata()) {
      if (automaton != null) {
        templates.put(automaton.getName(), automaton);
      }
    }

  }

  private UppaalAutomatonInterface loadAutomatonTemplate(String sTime) {
    UppaalAutomatonInterface blockAutomaton;

    if (sTime == null || sTime.equals("")) {
      blockAutomaton = templates.get("continuous");
    } else {
      blockAutomaton = templates.get("discrete");
    }

    return blockAutomaton;
  }

  private String loadBlockRoutine(SimulinkBlockWrapper sBlock) {

    return null;
  }

  public UppaalAutomatonInterface generateAutomaton(SimulinkBlockWrapper sBlock) {
    String sampleTime = sBlock.getSampleTime();
    String blockRoutine = loadBlockRoutine(sBlock);
    UppaalAutomaton blockAutomaton = (UppaalAutomaton) loadAutomatonTemplate(sampleTime);



    return blockAutomaton;
  }

  public generateUppaalModel(Collection<SimulinkBlockWrapper> )
}
