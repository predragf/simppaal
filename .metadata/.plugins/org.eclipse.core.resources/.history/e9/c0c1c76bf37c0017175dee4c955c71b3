/**
 * 
 */
package org.fmaes.simppaal.simulinktotimedautomata.core.testing;

import java.util.Collection;

import org.conqat.lib.simulink.model.SimulinkBlock;
import org.conqat.lib.simulink.model.SimulinkObject;
import org.fmaes.simppaal.simulinktotimedautomata.core.configuration.ApplicationConfiguration;
import org.fmaes.simppaal.simulinktotimedautomata.core.loaders.SimulinkModelLoader;
import org.fmaes.simppaal.simulinktotimedautomata.core.transformers.SimulinkModelTransformer;
import org.fmaes.simppaal.simulinktotimedautomata.core.types.Neighbour;
import org.fmaes.simppaal.simulinktotimedautomata.core.types.SimulinkBlockWrapper;
import org.fmaes.simppaal.simulinktotimedautomata.core.types.SimulinkModelWrapper;
import org.fmaes.simppaal.simulinktotimedautomata.sorder.SListParser;
import org.fmaes.simppaal.simulinktotimedautomata.sorder.SortedOrderEntry;
import org.fmaes.simppaal.simulinktotimedautomata.sorder.SortedOrderList;

/**
 * @author Predrag Filipovikj (predrag.filipovikj@mdh.se)
 *
 */
public class Testing {

  /**
   * @param args
   */

  private static int notFound;

  @SuppressWarnings("unused")
  public static void main(String[] args) {
    ApplicationConfiguration appConfig = ApplicationConfiguration.loadConfiguration();


    SimulinkModelTransformer smt = new SimulinkModelTransformer(appConfig);



    SimulinkModelLoader modelLoader = new SimulinkModelLoader(appConfig);
    SimulinkMode bbw = modelLoader.loadAndWrapSimulinkModelByName("bbw.mdl");

    long startTime = System.currentTimeMillis();
    SortedOrderList sList = SListParser.GetSortedOrderList("bbw", "./models/simulink/BBW/bbw.txt");

    SimulinkBlockWrapper trgr = bbw.getBlockById("bbw/5ms");

    if (trgr.exists()) {
      SimulinkBlock blk = trgr.getBaseBlock();
      for (SimulinkObject obj : blk.getObjects()) {
        if (obj != null) {
          for (String key : obj.getParameterNames()) {
            System.out.println(key);
            System.out.println("\t" + obj.getParameter(key));
          }
          System.out.println("#####################################");
          for (String key : obj.getDeclaredParameterNames()) {
            System.out.println(key);
            System.out.println("\t" + obj.getDeclaredParameter(key));
          }
        }
        System.out.println("stop");
      }

    }

    SimulinkBlockWrapper blk;
    notFound = 0;
    int counter = 1;
    for (SortedOrderEntry sortedOrderEntry : sList) {
      if (counter == 73) {
        String newAssignment = "";
      }
      blk = bbw.getBlockById(sortedOrderEntry.id);
      blk.setExecutionOrderNumber(counter);
      printN(blk, sortedOrderEntry.id);
      counter++;
    }
    long endTime = System.currentTimeMillis();
    long elapsedTime = (endTime - startTime) / 1000;
    System.out.println(String.format("The model parsing took %s seconds", elapsedTime));
    System.out.println(String.format("%d block were not found", notFound));
  }

  private static void printN(SimulinkBlockWrapper bw, String id) {

    if (bw.exists()) {
      System.out.println(String.format("%s (%d) has %d predecessors", bw.getId(),
          bw.getExecutionOrderNumber(), bw.getPredecessors().size()));
      System.out.println(String.format("Sample time is: %s", bw.getSampleTime()));
      Collection<Neighbour> neighbours = bw.getPredecessors();
      neighbours = bw.getPredecessors();
      for (Neighbour neighbour : neighbours) {
        System.out.println("* \t" + neighbour.getSourceSimulinkBlock().getId());
      }
    } else {
      System.err.println(String.format("%s was not found", id));
      notFound++;
    }
    System.out.println("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
  }

}
