package org.fmaes.simulinktotimedautomata.platformextender.blockroutinegenerator.minmax;

import org.fmaes.simulinktotimedautomata.blockroutinegenerator.BlockRoutineGeneratorInterface;
import org.fmaes.simulinktotimedautomata.types.wrappers.Predecessor;
import org.fmaes.simulinktotimedautomata.types.wrappers.SimulinkBlockWrapper;

public class MinMax implements BlockRoutineGeneratorInterface {

  @Override
  public String generateBlockRoutine(SimulinkBlockWrapper blockForParsing) {

    String blockR = "void blockRoutine(){#routineBody#;}";
    String outSignal = blockForParsing.getSignalName();
    int index = 0;
    /* you should read the correct one */
    Boolean min = false;
    String routineBody = "";
    for (Predecessor prdcsr : blockForParsing.predecessors) {
      String currentPrdcr = prdcsr.getSimulinkBlock().getSignalName();
      String condition = String.format("if(#condition#){%s = %s;}", outSignal, currentPrdcr);
      int secondIndex = 0;
      for (Predecessor prdcr2 : blockForParsing.predecessors) {
        if (currentPrdcr != prdcr2.getSimulinkBlock().getSignalName()) {
          if (secondIndex < 1) {
            if (min) {
              condition += String.format("%s <= %s", currentPrdcr,
                  prdcr2.getSimulinkBlock().getSignalName());
            } else {
              condition += String.format("%s >= %s", currentPrdcr,
                  prdcr2.getSimulinkBlock().getSignalName());
            }
            condition +=
                String.format("%s <= %s", currentPrdcr, prdcr2.getSimulinkBlock().getSignalName());
          } else {
            if (min) {
              condition += String.format("& %s <= %s", currentPrdcr,
                  prdcr2.getSimulinkBlock().getSignalName());
            } else {
              condition += String.format("& %s >= %s", currentPrdcr,
                  prdcr2.getSimulinkBlock().getSignalName());
            }
          }
          secondIndex++;
        }
        routineBody += String.format("%s \n", condition.replaceAll("#condition#", condition));
      }
    }

    // TODO Auto-generated method stub
    return blockR.replaceAll("#routineBody#", routineBody);
  }

}
